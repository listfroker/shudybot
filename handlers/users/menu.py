from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery, ReplyKeyboardRemove
from aiogram.utils.callback_data import CallbackData

from data.config import admins
from handlers.admins.menu import admin_main_menu
from keyboards.default.main_menu import kb_main_menu, back
from keyboards.inline.callback_datas import util_callback
from keyboards.inline.change_menu import choice, choice1
from loader import dp, db, bot
from states.menu import Menu
from states.reg import ChangeData


@dp.message_handler(text = "–ü–µ—Ä–µ–π—Ç–∏ –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
async def main_menu(message: types.Message):
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏–π —Ä–æ–∑–¥—ñ–ª, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µüëá", reply_markup=kb_main_menu)


#Review Menu  –∏ –≤—ã—Ö–æ–¥ –∏–∑ –Ω–µ–≥–æ + —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –æ—Ç–∑—ã–≤
@dp.message_handler(text = "–ó–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–¥–≥—É–∫üì¢")
async def review_menu(message: types.Message):
    await message.answer("–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à –≤—ñ–¥–≥—É–∫:",reply_markup=back)
    await Menu.Review_Menu.set()

@dp.message_handler(text = "–ù–∞–∑–∞–¥", state=Menu.Review_Menu)
async def back_to_menu(message: types.Message, state: FSMContext):
    if message.from_user.id in admins:
        await state.finish()
        await admin_main_menu(message)
    else:
        await state.finish()
        await main_menu(message)

@dp.message_handler(state=Menu.Review_Menu)
async def enter_review(message:types.Message, state: FSMContext):
    answer = message.text
    user = db.select_user(id = message.from_user.id)
    print(user)
    db.add_review(user_id = message.from_user.id, Name=user[2], nickname = message.from_user.username, baby_name=user[3], review=answer)
    await message.answer("–î—è–∫—É—é!")
    await bot.send_sticker(message.from_user.id, "CAACAgIAAxkBAAEH0n9j8zk1bM8IzhETea9TRZ1OfawFFQACEioAAhjSmUsleKP1kMbq7i4E")
    for admin in admins:
        await bot.send_message(admin, "–ù–∞–¥—ñ–π—à–æ–≤ –Ω–æ–≤–∏–π –≤—ñ–¥–≥—É–∫! \n–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –≤–∫–ª–∞–¥–∫—É –Ω–∞ –ø–∞–Ω–µ–ª—ñ –∞–¥–º—ñ–Ω–∞")
    if message.from_user.id in admins:
        await state.finish()
        await admin_main_menu(message)
    else:
        await state.finish()
        await main_menu(message)




#–ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#–†–µ–∞–∫—Ü–∏—è –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∏–∑ –º–µ–Ω—é
@dp.message_handler(text = "–ó–º—ñ–Ω–∏—Ç–∏ –¥–∞–Ω–Ω—ñüîÑ")
async def change_settings(message: types.Message):
    user = db.select_user(id = message.from_user.id)
    if user[3] == None:
        text = [
            "–¶–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–∞—à–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é:",
            f"–í–∞—à–µ —ñ–º'—è: {user[2]}",
            "–í –Ω–∞—Å –∑–∞–π–º–∞—î—Ç–µ—Å—å –í–∏",
            "<b>–©–æ–± –∑–º—ñ–Ω–∏—Ç–∏ –≤–∞—à—ñ –¥–∞–Ω–Ω—ñ - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂—á–µ</b>"
        ]
        await message.answer("\n".join(text), reply_markup=choice1, parse_mode="HTML")
    else:
        text = [
            "–¶–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–∞—à–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é:",
            f"–í–∞—à–µ —ñ–º'—è: {user[2]}",
            f"–í –Ω–∞—Å –∑–∞–π–º–∞—î—Ç—å—Å—è –í–∞—à–∞ –¥–∏—Ç–∏–Ω–∞ - {user[3]}",
            "<b>–©–æ–± –∑–º—ñ–Ω–∏—Ç–∏ –≤–∞—à—ñ –¥–∞–Ω–Ω—ñ - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂—á–µ</b>"
        ]
        await message.answer("\n".join(text), reply_markup=choice, parse_mode="HTML")





@dp.message_handler(state=ChangeData.Q1)
async def entername_menu(message: types.Message, state: FSMContext):
    answer = message.text
    db.update_user_name(name=answer, id=message.from_user.id)
    user = db.select_user(id = message.from_user.id)
    print(user)
    await message.answer(f"–Ü–º'—è –∑–º—ñ–Ω–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ –Ω–∞ {answer}!‚úÖ")

    if message.from_user.id in admins:
        await state.finish()
        await admin_main_menu(message)
    else:
        await state.finish()
        await main_menu(message)

@dp.message_handler(state=ChangeData.Q2)
async def enterbabyname_menu(message: types.Message, state: FSMContext):
    answer = message.text
    db.update_baby_name(baby_name=answer, id=message.from_user.id)
    user = db.select_user(id = message.from_user.id)
    print(user)
    await message.answer(f"–Ü–º'—è –¥–∏—Ç–∏–Ω–∏ –∑–º—ñ–Ω–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ –Ω–∞ {answer}!‚úÖ")
    if message.from_user.id in admins:
        await state.finish()
        await admin_main_menu(message)
    else:
        await state.finish()
        await main_menu(message)

#About studio

@dp.message_handler(text = "–ü—Ä–æ —Å—Ç—É–¥—ñ—é‚ú®")
async def about_studio(message: types.Message):
    text = "üåü–í–∞—Å –≤—ñ—Ç–∞—î —Ç–∞–Ω—Ü—é–≤–∞–ª—å–Ω–∞ —Å—Ç—É–¥—ñ—è Victory Dance Companyüåü \n\n" \
           "–ú–∏ —Ä–∞–¥—ñ, —â–æ –≤–∏ –∑–∞–≤—ñ—Ç–∞–ª–∏ –¥–æ –Ω–∞—à–æ–≥–æ –ø–æ–º—ñ—á–Ω–∏–∫–∞, —Ç—É—Ç –≤–∏–∫–ª–∞–¥–µ–Ω–∞ –æ—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å—Ç—É–¥—ñ—é:  \n\n" \
           "–ù–∞—à—ñ —Å–æ—Ü—ñ–∞–ª—å–Ω—ñ –º–µ—Ä–µ–∂—ñüòä: \n<a href = 'https://www.facebook.com/victory.dance.companyy/'>FACEBOOK</a> \n" \
           "<a href = 'https://instagram.com/victory.dance.comp?igshid=YmMyMTA2M2Y='>INSTAGRAM</a> \n\n" \
           "–ê–¥—Ä–µ—Å–∞ –Ω–∞—à–æ–≥–æ –∑–∞–ª—Éüó∫Ô∏è: <a href = 'https://goo.gl/maps/huAgHwRnyfLC4PpN7'>–≤—É–ª–∏—Ü—è –ú–∞—Ä—Å–µ–ª—å—Å—å–∫–∞ 42, –û–¥–µ—Å–∞</a>\n\n" \
           "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –Ω–∞—à–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞ —Ç–∞ —Ç–µ–ª–µ–≥—Ä–∞–ºüì±: \n097 410 32 81\n<a href = 't.me/vicktooria_shu'>–í—ñ–∫—Ç–æ—Ä—ñ—è –®—É–≤–∞–ª–æ–≤–∞</a>\n"
    await message.answer(text, parse_mode="HTML")


#–†–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏
#–ü–æ—Ç–æ–º –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª!!!!!!
@dp.callback_query_handler()
async def change_callback(call: CallbackQuery):
    if call.data == "user_name":
        await call.answer(cache_time=60)
        await call.message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", reply_markup=ReplyKeyboardRemove())
        await ChangeData.Q1.set()
    elif call.data == "baby_name":
        await call.answer(cache_time=60)
        await call.message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ —ñ–º'—è –¥–∏—Ç–∏–Ω–∏:", reply_markup=ReplyKeyboardRemove())
        await ChangeData.Q2.set()
    elif call.data == "one":
        await call.message.answer("–ó–∞ –±–∞–∂–∞–Ω–Ω—è–º, –í–∏ –º–æ–∂–µ—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –æ–ø–∏—Å–∞—Ç–∏, —â–æ –í–∞–º –Ω–µ —Å–ø–æ–¥–æ–±–∞–ª–æ—Å—è")
        db.update_month_mark(user_id=call.from_user.id, mark="1")
        await Menu.BadMark_Menu.set()
    elif call.data == "two":
        await call.message.answer("–ó–∞ –±–∞–∂–∞–Ω–Ω—è–º, –í–∏ –º–æ–∂–µ—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –æ–ø–∏—Å–∞—Ç–∏, —â–æ –í–∞–º –Ω–µ —Å–ø–æ–¥–æ–±–∞–ª–æ—Å—è")
        db.update_month_mark(user_id=call.from_user.id, mark="2")
        await Menu.BadMark_Menu.set()
    elif call.data == "three":
        await call.message.answer("–ó–∞ –±–∞–∂–∞–Ω–Ω—è–º, –í–∏ –º–æ–∂–µ—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –æ–ø–∏—Å–∞—Ç–∏, —â–æ –í–∞–º –Ω–µ —Å–ø–æ–¥–æ–±–∞–ª–æ—Å—è")
        db.update_month_mark(user_id=call.from_user.id, mark="3")
        await Menu.BadMark_Menu.set()
    elif call.data == "four":
        await call.message.answer("–ó–∞ –±–∞–∂–∞–Ω–Ω—è–º, –í–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç–∏, —â–æ–± –≤–∏ —â–µ —Ö–æ—Ç—ñ–ª–∏ –±–∞—á–∏—Ç–∏ –Ω–∞ –∑–∞–Ω—è—Ç—Ç—è—Ö")
        db.update_month_mark(user_id=call.from_user.id, mark="4")
        await Menu.GoodMark_Menu.set()
    elif call.data == "five":
        await call.message.answer("–ó–∞ –±–∞–∂–∞–Ω–Ω—è–º, –í–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç–∏, —â–æ–± –≤–∏ —â–µ —Ö–æ—Ç—ñ–ª–∏ –±–∞—á–∏—Ç–∏ –Ω–∞ –∑–∞–Ω—è—Ç—Ç—è—Ö")
        db.update_month_mark(user_id=call.from_user.id, mark="5")
        await Menu.GoodMark_Menu.set()


@dp.message_handler(state = Menu.BadMark_Menu)
async def badmark_explanation(message: types.Message, state: FSMContext):
    answer = message.text
    user = db.select_user(id=message.from_user.id)
    db.add_month_review(Name = user[2], nickname=user[4], baby_name=user[3], month_review=answer, user_id=user[0])
    await message.answer("–î—è–∫—É—é –∑–∞ –≤–∞—à –≤—ñ–¥–≥—É–∫!‚ù§Ô∏è\n–ú–∏ –Ω–∞–º–∞–≥–∞—Ç–∏–º–µ–º–æ—Å—è –∑—Ä–æ–±–∏—Ç–∏ –≤–∞—à –º–∞–π–±—É—Ç–Ω—ñ–π –¥–æ—Å–≤—ñ–¥ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å —É –Ω–∞—à—ñ–π —Å—Ç—É–¥—ñ—ó –∫—Ä–∞—â–µ\n–ë–∞–∂–∞—é –≥–∞—Ä–Ω–æ–≥–æ –¥–Ω—èüòä")
    if message.from_user.id in admins:
        await state.finish()
        await admin_main_menu(message)
    else:
        await state.finish()
        await main_menu(message)

@dp.message_handler(state=Menu.GoodMark_Menu)
async def goodmark_explanation(message:types.Message, state: FSMContext):
    answer = message.text
    user = db.select_user(id=message.from_user.id)
    db.add_month_review(Name=user[2], nickname=user[4], baby_name=user[3], month_review=answer, user_id=user[0])
    await message.answer("–î—è–∫—É—é –∑–∞ –≤–∞—à –≤—ñ–¥–≥—É–∫!‚ù§Ô∏è\n–ú–∏ –¥—É–∂–µ —Ä–∞–¥—ñ, —â–æ –≤–∞–º —Å–ø–æ–¥–æ–±–∞–ª–∏—Å—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è —É –Ω–∞—Å‚ò∫Ô∏è\n–ë–∞–∂–∞—é –≥–∞—Ä–Ω–æ–≥–æ –¥–Ω—èüòä")
    if message.from_user.id in admins:
        await state.finish()
        await admin_main_menu(message)
    else:
        await state.finish()
        await main_menu(message)











