import sqlite3

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.builtin import CommandStart
from aiogram.types import ReplyKeyboardRemove

from data.config import admins
from keyboards.default.is_baby import is_baby
from keyboards.default.to_menu import to_menu
from loader import dp, db, bot

from states.reg import Registration


@dp.message_handler(CommandStart())
async def bot_start(message: types.Message, state: FSMContext):
    name = message.from_user.full_name
    user = db.select_user(id=message.from_user.id)

    await bot.send_sticker(message.from_user.id, "CAACAgIAAxkBAAEH0ntj8zhu-BhYd9AmTDBUzODCDwthYAAC_CsAAomCmEs3tSBs_jhz8S4E")
    await message.answer('–î–æ–±—Ä–∏–π –¥–µ–Ω—å, –º–µ–Ω–µ –∑–≤–∞—Ç–∏ Shudy!\n–Ø –±–æ—Ç-–ø–æ–º—ñ—á–Ω–∏–∫ —Å—Ç—É–¥—ñ—ó —Ç–∞–Ω—Ü—é VDCüòä\n–¢—É—Ç –í–∏ –º–æ–∂–µ—Ç–µ –∑–∞–ª–∏—à–∞—Ç–∏ –≤—ñ–¥–≥—É–∫–∏ –ø—Ä–æ –¥–æ—Å–≤—ñ–¥ –∑–∞–Ω—è—Ç—å –≤ –Ω–∞—à—ñ–π —Å—Ç—É–¥—ñ—ó!\n–Ü–Ω–æ–¥—ñ —è —Ä–æ–±–∏—Ç–∏–º—É –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è —Ç–∞ –ø—Ä–æ–≤–æ–¥–∏—Ç–∏–º—É –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—èüì¢\n–û–±—ñ—Ü—è—é –Ω–µ –¥–æ–∫—É—á–∞—Ç–∏üòâ')
    if user == None:
        try:
            db.add_user(id=message.from_user.id, Name= name, nickname=message.from_user.username)
        except sqlite3.IntegrityError as err:
            print(err)
        await message.answer("–î–∞–≤–∞–π—Ç–µ –ø–æ–∑–Ω–∞–π–æ–º–∏–º–æ—Å—åüôÇ\n–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å –í–∞—à–µ —ñ–º'—è")
        await Registration.Q1.set()
    else:
        print(user)
        await message.answer("–Ø –ø–∞–º'—è—Ç–∞—é –í–∞—Åüëç, –∑–∞—Ö–æ–¥—å—Ç–µ –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", reply_markup=to_menu)
        await state.finish()



@dp.message_handler(state=Registration.Q1)
async def first_quest(message: types.Message):
    answer = message.text
    db.update_user_name(answer, message.from_user.id)
    await message.answer(
        "\n".join(["–ü—Ä–∏—î–º–Ω–æ –ø–æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—è!",
                   "–Ø–∫—â–æ –≤ –Ω–∞—Å –∑–∞–π–º–∞—î—Ç—å—Å—è –í–∞—à–∞ –¥–∏—Ç–∏–Ω–∞, –Ω–∞–ø–∏—à—ñ—Ç—å, —Ç–∞–∫–æ–∂, —ó—ó —ñ–º'—è",
                   "–ê–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ"]
                  ), reply_markup=is_baby
    )
    await Registration.Q2.set()

@dp.message_handler(state=Registration.Q2)
async def second_quest(message: types.Message, state: FSMContext):
    answer = message.text
    if answer == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏":
        await message.answer("–î—è–∫—É—é –∑–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—éüíû \n–¢–µ–ø–µ—Ä –í–∞–º –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–æ –º–µ–Ω—é –±–æ—Ç—É‚úÖ\n–Ø–∫—â–æ –≤–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–∫–∞–∑–∞–ª–∏ –¥–∞–Ω—ñ –ø—ñ–¥ —á–∞—Å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó - —ó—Ö –º–æ–∂–Ω–∞ –ª–µ–≥–∫–æ –∑–º—ñ–Ω–∏—Ç–∏, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏, –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é!", reply_markup=to_menu)
        await state.finish()
        print(db.select_all_users())
        for admin in admins:
            bot.send_message(admin, "–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞–≤—Å—è –Ω–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á!\n–î–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑–∞–π–¥—ñ—Ç—å –≤ –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å -> –£—Å—ñ —é–∑–µ—Ä–∏")
    else:
        db.update_baby_name(answer, message.from_user.id)
        await message.answer("–î—è–∫—É—é –∑–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—éüíû \n–¢–µ–ø–µ—Ä –í–∞–º –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–æ –º–µ–Ω—é –±–æ—Ç—É‚úÖ\n–Ø–∫—â–æ –≤–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–∫–∞–∑–∞–ª–∏ –¥–∞–Ω—ñ –ø—ñ–¥ —á–∞—Å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó - —ó—Ö –º–æ–∂–Ω–∞ –ª–µ–≥–∫–æ –∑–º—ñ–Ω–∏—Ç–∏, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏, –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é!", reply_markup=to_menu)
        await state.reset_state()
        print(db.select_all_users())
        for admin in admins:
            bot.send_message(admin, "–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞–≤—Å—è –Ω–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á!\n–î–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑–∞–π–¥—ñ—Ç—å –≤ –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å -> –£—Å—ñ —é–∑–µ—Ä–∏")
